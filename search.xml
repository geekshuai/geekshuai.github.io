<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F4a17b156.html</url>
    <content type="text"><![CDATA[欢迎使用马克飞象@(Python)[马克飞象, 帮助, Markdown]马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；得心应手 ：简洁高效的编辑器，提供桌面客户端以及离线Chrome App，支持移动端 Web；深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。[TOC]¶Markdown简介Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[1]。下面列举了几个高级功能，更多语法请按Ctrl + /查看帮助。¶代码块12345678910@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt'''¶LaTeX 公式可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：$$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$¶表格ItemValueQtyComputer1600 USD5Phone12 USD12Pipe1 USD234¶流程图12345678st=&gt;start: Starte=&gt;endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op以及时序图:123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!提示：想了解更多，请查看流程图语法以及时序图语法。¶复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如：[x] 已完成事项[ ] 待办事项1[ ] 待办事项2注意：目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在马克飞象中修改 Markdown 原文才可生效。下个版本将会全面支持。¶印象笔记相关¶笔记本和标签马克飞象增加了@(笔记本)[标签A|标签B]语法, 以选择笔记本和添加标签。 绑定账号后， 输入(自动会出现笔记本列表，请从中选择。¶笔记标题马克飞象会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 欢迎使用马克飞象。¶快捷编辑保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到马克飞象中打开并编辑该笔记。**注意：**目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。¶数据同步马克飞象通过将Markdown原文以隐藏内容保存在笔记中的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。¶离线存储马克飞象使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过文档管理打开。**注意：**虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，请务必经常及时同步到印象笔记。¶编辑器相关¶设置右侧系统菜单（快捷键Ctrl + M）的设置中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。¶快捷键帮助 Ctrl + /同步文档 Ctrl + S创建文档 Ctrl + Alt + N最大化编辑器 Ctrl + Enter预览文档 Ctrl + Alt + Enter文档管理 Ctrl + O系统菜单 Ctrl + M加粗 Ctrl + B插入图片 Ctrl + G插入链接 Ctrl + L提升标题 Ctrl + H¶关于收费马克飞象为新用户提供 10 天的试用期，试用期过后需要续费才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。¶反馈与建议微博：@马克飞象，@GGock邮箱：hustgock@gmail.com感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。这是一个示例脚注。请查阅 MultiMarkdown 文档 关于脚注的说明。 限制： 印象笔记的笔记内容使用 ENML 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致脚注和TOC无法正常点击。 ↩]]></content>
      <categories>
        <category>hexo</category>
        <category>hello</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F4a17b156.html</url>
    <content type="text"><![CDATA[nginx配置文件-server配置部分(1.4)server{} 包含在h=ttp=={}内部，每一个server{}都是一个虚拟主机（站点）。sssssadasd¶以下为nginx.conf配置文件中server{}部分的内容。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980 server &#123; listen 80; //监听端口为80，可以自定义其他端口，也可以加上IP地址，如，listen 127.0.0.1:8080; server_name localhost; //定义网站域名，可以写多个，用空格分隔。 #charset koi8-r; //定义网站的字符集，一般不设置，而是在网页代码中设置。 #access_log logs/host.access.log main; //定义访问日志，可以针对每一个server（即每一个站点）设置它们自己的访问日志。 ##在server&#123;&#125;里有很多location配置段 location / &#123; root html; //定义网站根目录，目录可以是相对路径也可以是绝对路径。 index index.html index.htm; //定义站点的默认页。 &#125; #error_page 404 /404.html; //定义404页面 # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; //当状态码为500、502、503、504时，则访问50x.html location = /50x.html &#123; root html; //定义50x.html所在路径 &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #定义访问php脚本时，将会执行本location&#123;&#125;部分指令 #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; //proxy_pass后面指定要访问的url链接，用proxy_pass实现代理。 #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; //定义FastCGI服务器监听端口与地址，支持两种形式，1 IP:Port， 2 unix:/path/to/sockt # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; //定义SCRIPT_FILENAME变量，后面的路径/scripts为上面的root指定的目录 # include fastcgi_params; //引用prefix/conf/fastcgi_params文件，该文件定义了fastcgi相关的变量 #&#125; # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\.ht &#123; //访问的url中，以/.ht开头的，如，www.example.com/.htaccess，会被拒绝，返回403状态码。 # deny all; //这里的all指的是所有的请求。 #&#125;&#125;# another virtual host using mix of IP-, name-, and port-based configuration##server &#123;# listen 8000; //监听8000端口# listen somename:8080; //指定ip:port# server_name somename alias another.alias; //指定多个server_name# location / &#123;# root html;# index index.html index.htm;# &#125;#&#125;# HTTPS server##server &#123;# listen 443 ssl; //监听443端口，即ssl# server_name localhost;### 以下为ssl相关配置# ssl_certificate cert.pem; //指定pem文件路径# ssl_certificate_key cert.key; //指定key文件路径# ssl_session_cache shared:SSL:1m; //指定session cache大小# ssl_session_timeout 5m; //指定session超时时间# ssl_protocols TLSv1 TLSv1.1 TLSv1.2; //指定ssl协议# ssl_ciphers HIGH:!aNULL:!MD5; //指定ssl算法# ssl_prefer_server_ciphers on; //优先采取服务器算法# location / &#123;# root html;# index index.html index.htm;# &#125;#&#125;]]></content>
      <categories>
        <category>hexo</category>
        <category>hello</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F4a17b156.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.¶Quick Start¶Create a new post1$ hexo new "My New Post"More info: Writing¶Run server1$ hexo serverMore info: Server¶Generate static files1$ hexo generateMore info: Generating¶Deploy to remote sites1$ hexo deployMore info: Deployment]]></content>
      <categories>
        <category>hexo</category>
        <category>hello</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CentOS7下Tomcat启动慢的原因及解决方案]]></title>
    <url>%2Fposts%2F9bf65238.html</url>
    <content type="text"><![CDATA[HTTP原理概念知识讲解¶什么是HTTPHTTP全称为HyperText Transfer Protocol，翻译为中文为“超文本传输协议”，它是互联网上应用最为广泛的一种网络协议，HTTP属于TCP的一种应用协议，它主要的作用是把服务器上的文本、图形、音乐、视频等多媒体资源展现给用户，用户通过User_agent（比如，浏览器）来查看这些信息。¶HTTP的发展历史1）HTTP/0.9版本HTTP第一个版本于1991年发布，在那个年代互联网还没有怎么发展，所以0.9版本的HTTP也是十分简单的，该版本只有一个GET命令，并没有HTTP头，也没有状态码。发布时并没有定义版本号，这个0.9是后来给它加上的，主要是和后面的1.0版本进行区分。该版本仅支持html的文本，所以当时的网页也就是简单的文字，非常单一。===服务器不支持长连接==当客户端和服务端通信完后就会关闭连接，一次连接一个请求。由于没有状态码，如果服务器处理的时候发生了错误，它只能传回一个包含问题描述信息的HTML文本。2）HTTP/1.0版本HTTP的1.0版本于1996年5月发布1，该版本有了很大改进。1.0版本支持了更多文件格式，比如图片、视频、二进制文件，使得网页内容更加丰富，该版本的出现促使了互联网快速发展。相比上一个0.9版本，它支持了更多的方法：GET、POST、HEAD。之前我们只能从服务器上下载HTML，到了这个版本我们还可以向服务器提交数据。另外，该版本增加了包头信息（HTTP header）、状态码、缓存、权限等功能。但是，==服务器还是不支持长连接==，当客户端和服务端通信完后就会关闭连接，一次连接一个请求。3）HTTP/1.1版本1997年1月发布了HTTP1.1版本，其实，目前主流的HTTP版本依然是1.1。1.1版本终于==支持了持久连接(长连接)，==一个连接可以发送多个请求，并且支持一个连接同时发送多个请求（服务器端需要按顺序返回结果）。它在上一版的基础上又支持了更多的方法：PUT、PATCH、DELETE、OPTIONS。另外，1.1版本在客户端请求头信息增加了Host字段，定义了服务器的域名，从而服务器上支持了虚拟主机，即一台机器多个站点。4）HTTP/2 版本HTTP的2版本（注意，这里并不是2.0）于2015年发布，目前还未正式大规模使用，但大多浏览器已经支持。在之前版本里，HTTP header必须是文本（ASCII编码）格式，body部分可以是文本也可以是二进制，但在HTTP/2版本，无论是header还是body都是二进制数据。==HTTP/2支持了在一个连接里，客户端和服务端同时发送多个请求，==这个特性跟1.1版本有很大的差异，如下图所示：由于支持了在一个连接里同时发送多个请求和多个回应，为了区分它们就需要对数据做标记，每个请求或回应的所有数据包为一个数据流（stream），每个数据流都有一个唯一的ID，客户端发送的请求ID为奇数，服务端返回的为偶数。HTTP/2支持header压缩，并且支持header信息索引，客户端和服务端有一张相同的索引表，不同的header对应不同的索引号，发送请求时不会再发header，而是发索引号，这样大大节省了传输header的时间。HTTP/2还支持了服务端主动推送功能，如果一个网页中含有大量的静态资源（js、css、图片等），之前版本是当该网页传输完成后解析所有html代码后，然后再去传输网页中包含的资源，而HTTP/2版本可以在网页没有传输完之前就主动把该网页中包含的静态资源推送到客户端，这样省去了客户端再次发请求的过程。]]></content>
      <categories>
        <category>云服务器</category>
      </categories>
      <tags>
        <tag>centOS</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
</search>
